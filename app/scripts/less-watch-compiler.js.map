{"version":3,"sources":["less-watch-compiler.js"],"names":["sys","require","fs","path","sh","extend","exec","lessWatchCompilerUtils","cwd","pwd","data","mainFilePath","undefined","program","packagejson","version","usage","option","parse","process","argv","exists","readFileSync","customConfig","JSON","console","log","config","init","args","watchFolder","outputFolder","mainFile","sourceMap","plugins","exit","join","watchTree","interval","ignoreDotFiles","filter","filterFiles","f","curr","prev","fileimportlist","nlink","importedFile","i","k","substring","length","compileResult","compileCSS","outputFilePath","getDateTime"],"mappings":"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","file":"less-watch-compiler.js","sourcesContent":["\n'use strict';\n\n/* Copyright 2012, Jonathan Cheung Licensed and released under the MIT\n   license. Refer to MIT-LICENSE.txt.\n\n  A nodejs script that watches folders(and subfolders) for changes and automatically compile the less css files into css.\n\n  Always give credit where it is due. Parts of this script is modified from Mikeal Rogers's watch script (https://github.com/mikeal/watch)\n\n   Basic Usage:     less-watch-compiler FOLDER_TO_WATCH FOLDER_TO_OUTPUT\n   Example:         'less-watch-compiler less css' will watch ./less folder\n                    and compile the less css files into ./css when they are added/updated\n*/\nvar sys = require('util'),\n    fs = require('fs'),\n    path = require('path'),\n    sh = require('shelljs'),\n    extend = require('extend'),\n    exec = require('child_process').exec,\n    lessWatchCompilerUtils = require('./lib/lessWatchCompilerUtils.js'),\n    cwd = sh.pwd(),\n    data,\n    mainFilePath = undefined,\n    program = require('commander'),\n    packagejson = require('../package.json');\n\nprogram.version(packagejson.version).usage('[options] <source_dir> <destination_dir> [main_file_name]').option('--source-map', \"Generate source map for css files\").option('--main-file <file>', \"Specify <file> as the file to always re-compile e.g. '--main-file style.less'\").option('--plugins <plugin-a>,<plugin-b>', 'List of plugins separated by commas').parse(process.argv);\n\n// See if folder cwd contains \nfs.exists(cwd + '/less-watch-compiler.config.json', function (exists) {\n  if (exists) {\n    data = fs.readFileSync(cwd + '/less-watch-compiler.config.json');\n    var customConfig = JSON.parse(data);\n    console.log('Config file ' + cwd + '/less-watch-compiler.config.json is loaded.');\n    extend(true, lessWatchCompilerUtils.config, customConfig);\n  }\n  init();\n});\n\nfunction init() {\n  if (program.args[0]) lessWatchCompilerUtils.config.watchFolder = program.args[0];\n  if (program.args[1]) lessWatchCompilerUtils.config.outputFolder = program.args[1];\n  if (program.args[2]) lessWatchCompilerUtils.config.mainFile = program.args[2];\n  if (program.mainFile) lessWatchCompilerUtils.config.mainFile = program.mainFile;\n  if (program.sourceMap) lessWatchCompilerUtils.config.sourceMap = program.sourceMap;\n  if (program.plugins) lessWatchCompilerUtils.config.plugins = program.plugins;\n\n  /*\n    3rd parameter is optional, but once you define it, then we will just compile \n    the main and generate as \"{main_file_name}.css\". All the files that has been \n    referenced from the main one will be minified into it.\n    Assuming the 3rd is \"main.less\"\n    - input folder: src\n    src\n        main.less (import aux.less)\n        aux.less\n    - output folder: dist\n    dist\n        main.css\n        \n    Otherwise, it will behave as previously:\n    Assuming the 3rd is empty\n    - input folder: src\n    src\n        main.less (import aux.less)\n        aux.less\n    - output folder: dist\n    dist\n        main.css\n        aux.css\n  */\n\n  if (!lessWatchCompilerUtils.config.watchFolder || !lessWatchCompilerUtils.config.outputFolder) {\n    console.log('Missing arguments. Example:');\n    console.log('\\tnode less-watch-compiler.js FOLDER_TO_WATCH FOLDER_TO_OUTPUT');\n    console.log('\\tExample 1: To watch all files under the folder \"less\" and compile all into a folder \"css\".');\n    console.log('\\t\\t less-watch-compiler less css');\n    process.exit(1);\n  }\n  if (lessWatchCompilerUtils.config.mainFile) {\n    mainFilePath = [lessWatchCompilerUtils.config.watchFolder, lessWatchCompilerUtils.config.mainFile].join('/');\n    fs.exists(mainFilePath, function (exists) {\n      if (!exists) {\n        console.log(\"Main file \" + mainFilePath + \" does not exist.\");\n        process.exit();\n      }\n    });\n  }\n\n  console.log('Watching directory for file changes.');\n  lessWatchCompilerUtils.watchTree(lessWatchCompilerUtils.config.watchFolder, { interval: 200, ignoreDotFiles: true, filter: lessWatchCompilerUtils.filterFiles }, function (f, curr, prev, fileimportlist) {\n    if (typeof f == 'object' && prev === null && curr === null) {\n      // Finished walking the tree\n      return;\n    } else if (curr.nlink === 0) {\n      // f was removed\n      console.log(f + ' was removed.');\n    } else {\n      // f is a new file or changed\n      var importedFile = false;\n      for (var i in fileimportlist) {\n        for (var k in fileimportlist[i]) {\n          if (f.substring(lessWatchCompilerUtils.config.watchFolder.length + 1) == fileimportlist[i][k]) {\n            var compileResult = lessWatchCompilerUtils.compileCSS(i);\n            console.log('The file: ' + i + ' was changed because ' + f + ' is specified as an import.  Recompiling ' + compileResult.outputFilePath + ' at ' + lessWatchCompilerUtils.getDateTime());\n            importedFile = true;\n          }\n        }\n      }\n      if (!importedFile) {\n\n        var compileResult = lessWatchCompilerUtils.compileCSS(mainFilePath || f);\n        console.log('The file: ' + f + ' was changed. Recompiling ' + compileResult.outputFilePath + ' at ' + lessWatchCompilerUtils.getDateTime());\n      }\n    }\n  }, function (f) {\n    lessWatchCompilerUtils.compileCSS(mainFilePath || f);\n  });\n}"]}